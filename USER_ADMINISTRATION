CHAPTER 18 : USER ADMINISTRATION:

User Hierarchy, User Security Logs, User administration Commands, Login Sequence.

DEFAULT USERS IN AIX,
root,daemon,bin,sys,adm,nobody,lp,invscout,smmsp,snapp,ipsec,srvproxy,esaadmin,sshd,sftp,coretxn

DEFAULT GROUP IN AIX, 
system,staff,bin,sys,adm,mail,security,cron,ecs,nobody,perf,shutdown,lp,smmsp,snapp,ipsec,sshd,printq


# mkuser 	--> Create user 
	# mkuser username	
# passwd  	--> Create a password 
	# passwd username
	# passwd -S username
	# passwd -U username 
	# passwd -l username 
# lsuser	-->
	# lsuser -f username
	# lsuser -f ALL   (detailed)
	# lsuser -a login rlogin uucp username		--> 
# chuser 
	# chuser unsuccessful_login_count=0 account_locked=false rlogin=true login=true username	
# pwdadm		-->
    # pwdadm -c user_name
# last		--> how long the user was logged on.	
# ulimit 	-->
	# ulimit -f size	--> Increase the file size.
	# ulimit -t number_of_seconds	--> Increase the cpu size.
	# ulimit -d size	--> Increase the data size. 
	# ulimit -s size	--> Increase the stack size.
	# ulimit -c size	--> Increase the core size.

# smit mkuser 
# smit chuser	--> change the user parameters.
# smit lockuser		--> Change user account lock and unlock user.  
# smit failed_logins	--> you can unlock the user using the Reset User’s Failed Login Count.

display users:-
	cat /etc/passwd

========================Accounts================================

	
	
create a user:-
	mkuser
	useradd
		
remove a user:-
	rmuser
	userdel
	
modify a user:-
	chuser -a
	usermod
	passwd -f
	passwd -s
	chfn <username>
	chfn <username><shell>
change user password:-
	passwd
	pwdadm
	pwdck -t ALL
create a group:-
	mkgroup <group name>
remove a group:-
	rmgroup <group name>
modify a goup:-
	chgroup <attribute><group name>
password files:-
	/etc/security/passwd
	
useful user commands:-
	id
	whoami
	who
	w
	uptime (displays # of users logged in)
	finger
	
	# License information
	lslicense
	chlicense
	
	# Maximum number of processes for a user
	lsattr -D -l sys0 -a maxuproc
	chdev -l sys0 -a maxuproc=<number>
useful group commands:-
	groups
	setgroups
	lsgroup ALL
Password Policy:-
	
Password Aging:-

======================Security========================================
Checking the passwd file:
	pwdck -t ALL
	usrck -t ALL
checking the group file:
	grpck
console login (allow/deny):-
	# No reboot required
	/etc/security/user	
	chsec -f /etc/security/user -s root

dispuid						<--Displays all valid user IDs on the system.

logins						<--Displays user and system login information.
								logins -p : lists all the logins with no passwords.

lsuser						<--Displays attributes of user accounts.
								lsuser ALL : displays all the attributes of all the users.

mkuser						<--Creates a new user account. System files: /etc/passwd (contains basic user attributes) and /etc/group (contains basic group attributes). The default attributes are in the/usr/lib/security/mkuser.default file.
								mkuser erik : creates the erik user account.

passwd						<--Changes a user's password. System files: /etc/security/passwd (contains password information).
								passwd hans : changes the password of user hans.

pwdadm						<--Administers users' passwords (by root or a member of the security group).

chsec						<--Changes the attributes in the security stanza files.
								chsec -f /etc/security/login.cfg -s default -a pwdprompt="Password:" : changes the system-wide password (echo's user name) prompt to Password (doesn't echo user name.
								chsec -f /etc/security/login.cfg -s default -a usernameecho=false : hides the user name from login and system messages.

mkuser.sys					<--Customizes a new user account.

chuser						<--Changes attributes for the specified user.

rmuser						<--Removes a user account.
								rmuser -p erik : removes user erik.
								rm -r /home/erik : removes erik's home directory.

dispgid						<--Displays all valid groups on the system.

lsgroup						<--Displays the attributes of groups.
								lsgroup ALL : lists all groups.

chgroup						<--Changes attributes for groups (don't use in combination with NIS).

chgrpmem					<--Changes the administrators or members of a group.

mkgroup						<--Creates a new group.

rmgroup						<--Removes a group.

usrck						<--Verifies the correctness of a user definition.

grpck						<--Verifies the correctness of a group definition.

pwdck						<--Verifies the correctness of local authentication information.

last						<--Displays information about previous logins using the /var/adm/wtmp file.
								last root : display all logins and logoffs by user root.
								last -t 31081125 : displays all users still logged in at 11.25 am on August 31th.

who							<--Identifies the users currently logged in.
								who /var/adm/wtmp : displays a history of logins and logouts, system startups and shutdowns.

wall						<--Writes a message to all users or users of a specific group that are logged in.
								wall -g staff : broadcasts to group staff.

repquota					<--Summarizes quotas for a file system.
								repquota -u /home : prints a summary of user quotas in the /home file system.
								repquota -a : prints quotas for all file systems enabled with quotas in the /etc/filesystems file

edquota						<--Edits user and group quotas.

quota						<--Displays disk usage and quotas.
								quota : displays the quotas of the current user.
								quota -u erik : displays quotas as the root user for user erik.

quotacheck					<--Checks file system quota consistency.
								quotacheck /home : checks the user and group quotas in the /home file system.

quotaon or quotaoff			<--Turns on and off file system quotas.
								quotaon -u /home : turns on user quotas for the /home file system.
								quotaoff -v -a : turns off user and group quotas for all file systems (-a) in the /etc/filesystems file.

Getting list users and groups in AIX

$ lsuser ALL			<--Run the following command to get the list of users and associated groups in AIX environment

How to setup an user in AIX

Follow the below steps to create a user in AIX and assign to a group.

Step 1: Create a user
# mkuser user-name
 
Step 2: Create a group
# mkgroup group-name
 
Step 3: Create a home directory
# mkdir /home/users/user-name
 
Step 4: Provide permissions to home directory
#chown user-name:group-name /home/users/user-name
 
Step 5: Assign home directory to user
# chuser home=/home/users/user-name user-name
 
Step 6: Add user to the group
# chuser group=group-name user-name



Finding password rules in AIX:-
/etc/security/user		--> following file holds the password configuration

Unlock User ID in IBM AIX

Note: Required root or sudo access to perform this function.
To unlock an user that’s locked from several unsuccessful login attempts, follow the steps below. Replace <userid> with userid that needs to be unlocked in below.

If the user remembers the old password, skip this step and go to next. Else, execute the following command to reset the password and will be asked to enter the new password twice to confirm.
# passwd <userid>
or
$ sudo passwd <userid>

Execute the following command to reset unsuccessful login attempts count
# chsec -f /etc/security/lastlog -a unsuccessful_login_count=0 -s <userid>
or
$ sudo chsec -f /etc/security/lastlog -a unsuccessful_login_count=0 -s <userid>

Execute the below command to reset the lock switch
# chuser account_locked=false <userid>
or
$ sudo chuser account_locked=false <userid>

=========================================================================================================================================================================>

 
User/Group Management
dispuid		--> Displays all valid user IDs on the system.
logins		--> Displays user and system login information.
	# logins -p : lists all the logins with no passwords.
lsuser		--> Displays attributes of user accounts.
	# lsuser ALL : displays all the attributes of all the users.
mkuser		--> Creates a new user account. System files: /etc/passwd (contains basic user attributes) and /etc/group (contains basic group attributes). The default attributes are in the/usr/lib/security/mkuser.default file.
	# mkuser erik : creates the erik user account.
passwd		--> Changes a user's password. System files: /etc/security/passwd (contains password information).
	# passwd hans : changes the password of user hans.
pwdadm
	# Administers users' passwords (by root or a member of the security group).
chsec		--> Changes the attributes in the security stanza files.
	# chsec -f /etc/security/login.cfg -s default -a pwdprompt="Password:" : changes the system-wide password (echo's user name) prompt to Password (doesn't echo user name.
	# chsec -f /etc/security/login.cfg -s default -a usernameecho=false : hides the user name from login and system messages.
mkuser.sys	--> Customizes a new user account.
chuser		--> Changes attributes for the specified user.
rmuser		--> Removes a user account.
	# rmuser -p erik : removes user erik.
	# rm -r /home/erik : removes erik's home directory.
dispgid		--> Displays all valid groups on the system.
lsgroup		--> Displays the attributes of groups.
	# lsgroup ALL : lists all groups.
chgroup		--> Changes attributes for groups (don't use in combination with NIS).
chgrpmem	--> Changes the administrators or members of a group.
mkgroup		--> Creates a new group.
rmgroup		--> Removes a group.
usrck		--> Verifies the correctness of a user definition.
grpck		--> Verifies the correctness of a group definition.
pwdck		--> Verifies the correctness of local authentication information.
last		--> Displays information about previous logins using the /var/adm/wtmp file.
	# last root : display all logins and logoffs by user root.
	# last -t 31081125 : displays all users still logged in at 11.25 am on August 31th.
who			--> Identifies the users currently logged in.
	# who /var/adm/wtmp : displays a history of logins and logouts, system startups and shutdowns.
wall		--> Writes a message to all users or users of a specific group that are logged in.
	# wall -g staff : broadcasts to group staff.
repquota	--> Summarizes quotas for a file system.
	# repquota -u /home : prints a summary of user quotas in the /home file system.
	# repquota -a : prints quotas for all file systems enabled with quotas in the /etc/filesystems file
edquota		--> Edits user and group quotas.
quota		--> Displays disk usage and quotas.
	# quota : displays the quotas of the current user.
	# quota -u erik : displays quotas as the root user for user erik.
quotacheck	--> Checks file system quota consistency.
	# quotacheck /home : checks the user and group quotas in the /home file system.
quotaon		--> Turns on file system quotas.
	# quotaon -u /home : turns on user quotas for the /home file system.
quotaoff	--> Turns off file system quotas.
	# quotaoff -v -a : turns off user and group quotas for all file systems (-a) in the /etc/filesystems file.


USER - LOGIN
USER LOGIN PROCESS:
LOGIN PROCESS DESCRIPTION:

1. getty:
The file /etc/inittab contains possible ports for login (i.e. console). 
When init runs, a getty process is started for each port listed in that file. 
The process "getty" provides a login prompt on the terminal attached to that port. 
The actual message displayed (also known as the herald) by the getty process is defined in /etc/security/login.cfg (i.e. console login and password...). 
Once this is displayed getty process waits for a user to make a login attempt.
--------------
2. login:
First user name is entered. 
The login program checks /etc/passwd and /etc/security/passwd to see if a password is required. 
If a password is required or the user name doesn't match a valid name, the Password: prompt is displayed.
--------------
3. invalid:
If an invalid user name was given or the password is incorrect an entry is made in /etc/security/failedlogin.
    root@bb_lpar: / # who /etc/security/failedlogin
    root        vty0        Jun 08 12:50        <--username was valid, but password was incorrect
    UNKNOWN_    vty0        Jun 08 13:20        <--invalid username
If the user name is valid, but the password is incorrect, the number of failed attempts are tracked in /etc/security/lastlog.
    root@bb_lpar: / # cat /etc/security/lastlog
    root:
            time_last_login = 1339152601
            tty_last_login = /dev/pts/0
            host_last_login = server.domain.com
            unsuccessful_login_count = 2       <--this shows the number of failed login attemts of a user

    (or you can check that with command "lsuser")
--------------
4. valid:
If a user name and password is correct, the usw stanza in /etc/security/login.cfg is checked. 
This stanza sets the maximum number of concurrent logins in the systemt. If that number is exceeded, the login is denied.
root@bb_lpar: /etc/ssh # cat /etc/security/login.cfg
usw:
        shells = /bin/sh,/bin/bsh,/bin/csh...
        maxlogins = 32767                      <--this shows maximum concurrent logins on the system
        logintimeout = 60
        maxroles = 8
        auth_type = STD_AUTH
--------------
5. setup environment:
If everything is successful, then the user's environment is set using:
/etc/environment                 <--base environment settings (PATH, TZ, LANG...)
/etc/security/environ            <--defines the environment attributes for users (it is not used too much by users)
/etc/security/limits             <--defines process resource limits for users (fsize, rss, nofiles...)
/etc/security/user               <--contains the most important settings, outside of the basics in /etc/passwd(umask, expires, rlogin...)
--------------
6. /etc/motd:
The login program sets the current directory to the user's HOME directory and displays the content of /etc/motd , 
date of the last successful login, and the number of unsuccessful login attempts since the last successful login.

(if .hushlogin file is found in the HOME directory these infos will not be displayed)
--------------
7. shell:
Finally, control is passed to the login shell (as defined in /etc/passwd) 
which will read /etc/environment and run /etc/profile and $HOME/.profile and $HOME/.kshrc (when using Korn shell).
--------------
When a user logs out, the shell terminates and a new getty process is spawned for that  port.
--------------
Files used for user/environment customization (in login sequence):
1. /etc/environment           <--contains variables specifying the basic environment for all processes ( PATH, TZ, LANG...)
2. /etc/profile               <-- sets other system-wide default variables (TERM...)
3. $HOME/.profile             <-- lets you customize your individual working environment (PATH, ENV, PS1...)
4. $HOME/.kshrc               <--if it is used, user can customize his personal Korn shell environment (set -o vi, alias...)
--------------
USER LOGIN RELATED FILES

/etc/motd                     contains the message to be displayed every time a user logs in to the system.
/etc/utmp                     contains the record of users logged into the system. (who /etc/utmp)
/var/adm/wtmp                 records the logins to the system. (who /var/adm/wtmp)
/var/adm/sulog                records information about su - username
/etc/environment              sets base environment variables for all processes (PATH, TZ, LANG...) (don't put commands there, only root)
/etc/profile                  specifies additional environment settings for all users. (TERM...) (only root)

/etc/security/login.cfg       contains configuration information for login and user authentication.
/etc/security/lastlog         contains the last login attributes for users
/etc/security/failedlogin     records all failed login attempts. (who /etc/security/failedlogin)
/etc/security/environ         defines the environment attributes for users (it is not used too much by users)
/etc/security/limits          defines process resource limits for users (fsize, rss, nofiles...)
/etc/security/user            contains the most important settings, outside of the basics in /etc/passwd(umask, expires, rlogin...)

$HOME/.profile                specifies user specific settings (user can overwrite settings from /etc/environment and /etc/profile)
                              ($HOME/profile contains ENV=$HOME/.kshrc)
$HOME/.kshrc                  user can customize his Korn shell environment (set -o vi, alias...) (it will be run when opening new shell)

--------------
UNSUCCESSFUL LOGIN COUNT RESET:
If a user's unsuccessful login count reaches a max value (loginretries=<value>), the user is not enabled to login into the system.
3004-303 There have been too many unsuccessful login attempts; please see
        the system administrator.
1. check unsuccessful login count:
root@bb_lpar: / # lsuser -f bb
        loginretries=3                                        <--shows max failed login retries, it is contained in /etc/security/user
        pwdwarntime=0
        account_locked=false
        unsuccessful_login_count=5                            <--it is higher than the max value
2. reset the login count:
root@bb_lpar: / # chuser unsuccessful_login_count=0 <user>    <--it will reset to 0 the number of unsuccessful login count
--------------
LOCKED ACCOUNT RESET:
It is possible, that an administrator disables a user to use the system temporary by locking it account.
3004-301 Your account has been locked; please see the system administrator.
1. check user account setting:
root@bb_lpar: / # lsuser -f bb
        account_locked=true                                    <--it will show if account is locked
        minage=0
        maxage=0
2. unlock the account:
root@bb_lpar: / # chuser account_locked=false bb               <--it will remove lock from the account
--------------
USER MAX CONCURRENT LOGINS ARE TOO HIGH
Maximum concurrent sessions of a user can be limited in /etc/security/user, by maxulogs entry.
If it is not limited, in the file there are no maxulogs entry and lsuser won't show anything, it can be checked only if it is set to a value.
Maximum number of login sessions exceeded for user <user>
1. check maxulogs entry of the user
root@bb_lpar: / # lsuser -f bb
        pwdchecks=
        dictionlist=
        maxulogs=3                                             <--it will show maximum concurrent allowed login sessions of a user
                                                               (this vallue can be checked in /etc/security/user as well)
2. change to a higher value (0 means unlimited)
root@bb_lpar: / # chuser maxulogs=0 <user>                     <--it will change to unlimited
---------------------------------
USER - PASSWORD
Passwords - Hashes
/etc/passwd              
# cat /etc/passwd
root:!:0:0:gecos:/home/root:/usr/bin/ksh
daemon:!:1:1:gecos:/etc:
bin:!:2:2:gecos:/bin:
sys:!:3:3:gecos:/usr/sys:
It contains the basic attributes of users. (username, if pw set, uid, gid, GECOS, home dir, shell)
(* means invalid or password is not set, ! means user has a password)  
---------------------------------
/etc/security/passwd      
It contains the passwords (encrypted) and other information (ADMCHG flag...) of users.
# cat /etc/security/passwd
root:
        password = WBs4CK8E5a7VA
        lastupdate = 1407504004

daemon:
        password = *

user1:
        password =

user2:
        password = ub9CBz/bLn9zI
        lastupdate = 1374196455
        flags = ADMCHG


password: it is usually the encrypted pw,
     if pw contains only an asterisk (*), account is locked until a password has been set (with ssh key you can login)
     if it is empty (user1), this allows anyone to log in or “su” to that account without being prompted for a password

lastupdate: number of seconds since epoch (1970. jan. 1) when the password was last updated

flags: restrictions to changing the user's password. You can set three different flags:
     ADMIN.   If set, only the root user can change the user's password.
     ADMCHG.  If set, the user is prompted to change his or her password on the next login/su.
     NOCHECK. If set, any additional restrictions in /etc/security/user are ignored.

It is possible to take the password hash of a user on one server and copy it to another server, so the user can log into the new server with the same password.
---------------------------------
PASSWORD ENCRYPTION ALGORITHMS
AIX 5.2 and 5.3 uses the old unix style crypt() function which has an 8 character limit. 
(It is possible to enter more than 8 characters, just  it is looking at the first eight characters and ignoring everything else.)

AIX 5.3 TL7 and AIX 6.1 introduce Loadable Password Algorithm (LPA). 
Each supported password encryption algorithm is implemented as an LPA module that is loaded at runtime when the algorithm is needed. 
The supported LPAs, and its attributes, are defined in the /etc/security/pwdalg.cfg file.

The available Loadable Password Alogrithms (LPA) are listed in /etc/security/pwdalg.cfg:
There is a stanza for each module in the file:

ssha1:
        lpa_module = /usr/lib/security/ssha
        lpa_options = algorithm=sha1

ssha256:
        lpa_module = /usr/lib/security/ssha
        lpa_options = algorithm=sha256

To change the password hash algorithm, the following command syntax can be used. In this example SHA512 has been used:
chsec -f /etc/security/login.cfg -s usw -a pwd_algorithm=ssha512
(It can be done with vi as well.)
After changing it the previously generated password hashes will stay the same and continue to work. 
Users will be able to login to the system with those passwords. 
The new algorithm will be used the next time a user changes his/her password and then the password hash of the user in /etc/security/passwd will be updated to the new one. 
Until then they will continue to use their original password and hashing algorithm.
---------------------------------
/etc/security/login.cfg 
This file will show the password hashing algorithm, which is in use globally on the system.
A valid value for pwd_algorithm is a name of stanza that is defined in /etc/security/pwdalg.cfg

 shells = /bin/sh,/bin/bsh,/bin/csh,/bin/ksh,/bin/tsh,/bin/ksh93
 maxlogins = 32767
 logintimeout = 60
 maxroles = 8
 auth_type = STD_AUTH
 pwd_algorithm = ssha512

If pwd_algorithm entry is missing here, the default value is "crypt" which is the legacy crypt() function.
---------------------------------
chpasswd                                         changes password of users (-c will clear all password flags)
pwdadm                                           administers users password (-c will clear all password flags)
echo "<user>:<pasword>" | chpasswd -c            it changes a user password (good for scripting, but pw is in clear text)
                                                 (“-c” clears out the ADMCHG flag, at next login no pw change is needed)
Changing a user pw in script (avoiding clear text):
1. openssl passwd                                it will prompt for the password twice, then show the password hash
2. echo “root:Ywa8SDcGhSnHB” | chpasswd -ec      it will change pw to the hash (-e encrypted format)

---------------------------------
RECOVERING ROOT PASSWORD:

1. Network boot from NIM (nim -o maint_boot -a spot ..., SMS network boot)
2. Choose: Access this volume group and start a shell
3. Run "passwd" from command prompt
4. Reboot to normal mode: sync;sync;sync;reboot

USER ADMINISTRATION RELATED COMMANDS:

mkuser                     Creates a new user
passwd                     Creates or changes the password of a user
pwdadm                     Change other people's passwords and does not require the old password (-q:shows flag, -c:clears it)
echo <user>:<password> | chpasswd; pwdadm -c <user> <--root user can change other users passwords by standard input
chuser                     Changes user attributes (except password)
chuser groups=staff,uucp bb        <--adds user "bb" to groups: staff, uucp
rmuser                     Removes a user and its attributes
chsec                      Changes security related stanzas
chsec -f /etc/security/lastlog -a unsuccessful_login_count=0 -s account_name    <--reset unsuccessful login count
chsh                       Changes a user's login shell
login                      Initiates a user session
dtconfig                   Enables or disables the desktop autostart feature
umask                      shows the actual umask
umask 022                  sets the umask to 022 (umask of 000 would give 666 permissions on a file or 777 on a directory)
w                          who logged in
whoami                     who am i
who am i                   who am i with more details
last                       who logged in last to the system
finger username            info about the user
lsuser -f <username>       deatiled info about the user (-f: readable format)
rmuser -p <username>       removes a user
                           (-p: removes auth. info from /etc/security/* files, the user's home dir is not removed automatically)
mkgroup                    makes a group
chgroup                    changes a group
lsgroup ALL                lists all group
lsgroup -f <groupname>     deatiled info about the user (-f: readable format)
rmgroup <groupname>        removes a group from the system
pwdck                      verifies consistency between /etc/passwd, /etc/security/user, and /etc/security/passwd
usrck                      verifies consistency between /etc/passwd, /etc/security/user, and /etc/security/limits
grpck                      verifies consistency between /etc/passwd, /etc/security/user, /etc/group, and /etc/security/group
usrck, grpck, pwdck        verifies the validity of: user, group, password
    -n                     reports errors but does not fix them
    -t                     reports errors and asks if they should be fixed

------------------------------------
USER CREATION
1. smitty user
2. pwdadm username          <--setting the password
3. pwdadm -c username       <--removing the ADMCHG flag from /etc/security/passwd file

chuser unsuccessful_login_count=0 <user>    clears unsuccessful login count

------------------------------------
NOFILES ( NUMBER OF FILE DESCRIPTORS A PROCESS MAY HAVE):
It specifies the number of open files permitted. If this value is set too low, 
a memory allocation error will occur on AIX and a too many files open will be logged to the to the stderr log file. 
Set this value higher than the default system value. For large multi-processor machines, set to unlimited.

# ulimit -a                   <--to query
# ulimit -n <new_value>       <--to set to a new value
# ulimit -n -1                <--to set it to unlimited

------------------------------------
MAXIMUM NUMBER OF PROCESSES PER USER:
'maxuproc' defines the max number of processes each AIX user can 'fork'. 
If it is set too low, you may not be able to create high number of database agents necessary to handle connections from your application.  
So it is recommended to set this to at least 4096.

# lsattr -El sys0 -a maxuproc		--> To query current setting

To set to a different value:
# chdev -l sys0 -a maxuproc='4096'
# chdev -l sys0 -a autostart=true : automatically reboot after a crash (default is false).
------------------------------------
COPYING USERS BETWEEN AIX SYSTEMS:
0. On source system check file consistency:
# usrck -t ALL
# pwdck -t ALL
# grpck -t ALL

1. These files should be copied:
/etc/group
/etc/passwd
/etc/security/group
/etc/security/limits
/etc/security/passwd
/etc/security/.ids
/etc/security/environ
/etc/security/.profile

These can be copied as well (between same AIX versions):
/etc/security/login.cfg
/etc/security/user

2. If needed edit /etc/passwd, to look like this:
root:!:0:0::/:/usr/bin/ksh

3. On destination system check file consistency:
# usrck -t ALL
# pwdck -t ALL
# grpck -t ALL

------------------------------------
MASS USER CREATION:
32 users had to be created.

1. I created 3 files:

test1: contained usernames
test2: contained gecos fields of the users (in the same order as the users were in test1)
test3: contained home dirs of the users (same order as in test1)

(It could be done in 1 file, with 3 columns and awk the columns, but this way was easier for me)

2. This script was created:
    x=1
    while [[ $x -lt 33 ]]
    do

    i=`cat test1 | head -n $x | tail -1`
    j=`cat test2 | head -n $x | tail -1`
    k=`cat test3 | head -n $x | tail -1`

    mkuser -a gecos="$j" home="$k" $i

    (( x += 1 ))
    done


3. After users were created, some attibutes were set to these users:
for i in `cat test1`; do chuser rlogin=true minage=0 maxage=0 maxexpired=-1 minalpha=0 minother=0 mindiff=0 maxrepeats=8 minlen=0 $i; done

4. User passwords have been set this way:
for i in `cat test1`; do echo $i:abcd1234| chpasswd; pwdadm -c $i; done

=========================================================================================================================================================================>
USER - AUTHENTICATION
Authentication

During the login process, the user and his password is checked. If these are correct (matched with the stored values), user access is granted. 
This whole thing is called, authentication. (Sometimes it is separated to Identification (user account verification) and Authentication (password verification).)

On AIX the identification and authentication modules are shipped with the Operating System by default. 
The identification module offers services like storing users and groups’ attributes, 
and the authentication module provides services such as password verification or modification. Some compound modules provide both services.

It is possible to use additional authentication modules, like:
- Light weight directory access protocol (LDAP)
- Kerberos
- Pluggable authentication modules (PAM)
- Network information service (NIS)

Before using these methods, these need to be configured in /usr/lib/security/methods.cfg:

NIS:
 program = /usr/lib/security/NIS
 program_64 = /usr/lib/security/NIS_64

LDAP:
 program = /usr/lib/security/LDAP
 program_64 = /usr/lib/security/LDAP64

KERBEROS:
 program = /usr/lib/security/KERBEROS
 program_64 = /usr/lib/security/KERBEROS64
 options = authonly,db=LDAP

CENTRIFYDC:
        program = /usr/lib/security/CENTRIFYDC
        program_64 = /usr/lib/security/CENTRIFYDC64
        options = nopromp

PAM:
        program = /usr/lib/security/PAM

PAMfiles:
        options = auth=PAM,db=BUILTIN


---------------------------------------------------------------

/etc/security/user

During the login of a user, the /etc/security/user file is checked for the authentication method of that user (local or LDAP...). 
This information is contained in the "registry" and "SYSTEM" parameters in that file.


/etc/security/user:
root:
        admin = true
        SYSTEM = "compat"
        account_locked = false
        rlogin = false
        admgroups = admin
        login = true
        registry = files


"compat" and files means, the authentication is done locally, for other methods (like LDAP ...), these need to be updated:

default:
        admin = false
        login = true
        ...
        SYSTEM = "LDAP"
        registry = LDAP
        ...

(In this case the default section has been changed, so for all local (already existing) users, SYSTEM = "compat" and registry = files need to be defined, 
otherwise the login process will search them on the LDAP Server.)

If a user account exists both locally and in LDAP, AIX requires both the SYSTEM and registry be set to the same value to work correctly. 
By setting the SYSTEM and registry differently, one will run into the risk that the user is defined to login through one mechanism, 
but the user's account activity is logged to a different user database.  It may also result in root managing the wrong account when changing password, locking the account, etc. 

A safe way of avoiding such problems is to set the SYSTEM and registry to the same value, e.g.,
# chuser SYSTEM=LDAP registry=LDAP user1

=========================================================================================================================================================================>
SYSTEM AND REGISTRY

At login time, the login process checks for the user's SYSTEM and registry attributes in /etc/security/user file. 
If it is an LDAP user, SYSTEM needs to be set to LDAP for the user. (If a user's SYSTEM attribute is not defined, the default SYSTEM value is used.)

Values for SYSTEM parameter:

- compat: (default setting) It tells the system to use the local database and, if no resolution found, the NIS database is tried.
- files: it specifies that only local files are to be used during authentication
- NONE: it turns off authentication. (To turn off all authentication, "NONE" must appear in the SYSTEM and auth1 lines of the user's stanza.)

Other acceptable values for the SYSTEM attribute can be defined in /usr/lib/security/methods.cfg. (LDAP...)
(The root user is always locally authenticated, SYSTEM = "compat")

The SYSTEM attribute can take more values, so more methods can be combined with AND / OR statements.(It is called authentication grammar.) 
For example if SYSTEM="compat" AND "LDAP, it means both authentication is needed to have a successful login.

registry

During login an additional parameter is checked in /etc/security/user, the "registry". 
It shows where the user informations are stored and which user database (registry) to use when managing users. It takes always just 1 value. (SYSTEM can have more values.)

- files: (default setting) It shows it is a local user (user information is stored in /etc/security/user)
- other values can be: LDAP, NIS, KRB5, PAM...


---------------------------------------------------------------

auth1 and auth2

auth1 and auth2 are (were) used to configure authentication methods for a user. 
auth1 lists mandatory methods (authentication fails if listed method failed), and auth2 contains additional methods which are used after auth1.
(authentication does not fail if listed method fails in auth2.)

Important, IBM writes this as official info:
Currently auth1 and auth2 is deprecated (not recommended) and should not be used to add additional methods (These may not be supported in future releases.)

Typically auth1 is set to SYSTEM and auth2 to NONE.

        auth1 = SYSTEM
        auth2 = NONE
        tpath = nosak
        umask = 77
        expires = 0
        SYSTEM = "CENTRIFYDC OR CENTRIFYDC[NOTFOUND] AND (compat)"


---------------------------------------------------------------

/etc/security/login.cfg

There are some login and user authentication information, which are stored in the usw stanza of /etc/security/login.cfg file:

usw:
        shells = /bin/sh,/bin/bsh,/bin/csh,/bin/ksh...
        maxlogins = 32767
        logintimeout = 30
        maxroles = 8
        auth_type = STD_AUTH
        pwd_algorithm = ssha512

auth_type and autcontroldomain (which is not set in the above example) can be configured in /etc/security/login.cfg.


authcontroldomain

If this attribute is set in /etc/security/login.cfg (by default it is not set), the "registry" and "SYSTEM" values will be gathered from the value defined there. 
For example, authcontroldomain=LDAP forces the system to look for user's SYSTEM and registry values from LDAP, and the /etc/security/user file will be not checked.

The authcontroldomain attribute is not valid for local users and it can be configured like this:
chsec -f /etc/security/login.cfg -s usw -a authcontroldomain=LDAP


auth_type

Defines the route through which applications can authenticate their users. The two values to which auth_type can be set are:

STD_AUTH - (default) standard user authentication.
PAM_AUTH - Use PAM to authenticate users via the /etc/pam.conf file


=========================================================================================================================================================================>


PAM (Pluggable Authentication Modules)

In the past if a program, such as su, passwd or login, needed to authenticate a user, it would read the necessary file (e.g. /etc/security/passwd.) 
If it needed to change the users' password, it would simply edit those files. This simple method presented numerous problems for system administrators and application developers. 
As MD5 and shadow passwords became popular, each program had to know how to get the proper information when dealing with different methods. 
If you wanted to change your user authentication method, all these programs had to be recompiled. 
PAM eliminates this complication by enabling programs to transparently authenticate users, regardless of how user information is stored.

This is accomplished by providing a library of functions that an application may use. 
With PAM, it doesn't matter whether your password is stored in /etc/security/passwd or on a separate server. 
When a program needs to authenticate a user, PAM provides a library containing the functions for authentication. 
Because this library is loaded dynamically, changing authentication methods can be done any time.

Starting with AIX V5.3, PAM is fully integrated into AIX. A default /etc/pam.conf file is shipped with additional PAM service modules. 
PAM can also be enabled for the entire system by changing the auth_type attribute to PAM_AUTH in the /etc/security/login.cfg file.

auth_type determines whether PAM or the standard AIX authentication mechanism will be used:
PAM_AUTH - Use the PAM library for user authenticate tasks as configured by the /etc/pam.conf file.
STD_AUTH - Use the standard AIX security library for user authentication tasks. This is the default value.

The following native AIX commands and applications have been changed to recognize the auth_type attribute and to directly call the PAM library 
if the system is configured to use PAM for authentication: login, rlogind, telnetd, su, passwd, ftpd, rexecd, rshd ..



When auth_type is changed to PAM_AUTH, these programs will use the PAM library configuration contained in /usr/lib/security/methods.cfg:

/usr/lib/security/methods.cfg:
PAM:
        program = /usr/lib/security/PAM

PAMfiles:
        options = auth=PAM,db=BUILTIN

Then the mentioned PAM library checks /etc/pam.conf file to determine which PAM module to use:

/etc/pam.conf:
# Authentication
#
dtaction auth   required        pam_aix
dtsession auth  required        pam_aix
dtlogin auth    required        pam_aix
ftp     auth    required        pam_aix
imap    auth    required        pam_aix
login   auth    required        pam_aix
rexec   auth    required        pam_aix
rlogin  auth    sufficient      pam_rhosts_auth
rlogin  auth    required        pam_aix
rsh     auth    required        pam_rhosts_auth
snapp   auth    required        pam_aix
su      auth    sufficient      pam_allowroot
su      auth    required        pam_aix
swrole  auth    required        pam_aix
telnet  auth    required        pam_aix
xdm     auth    required        pam_aix
OTHER   auth    required        pam_prohibit

#
# Account Management
#
dtlogin account required        pam_aix
ftp     account required        pam_aix
login   account required        pam_aix
rexec   account required        pam_aix
rlogin  account required        pam_aix
rsh     account required        pam_aix
su      account sufficient      pam_allowroot
su      account required        pam_aix
swrole  account required        pam_aix
telnet  account required        pam_aix
xdm     account required        pam_aix
OTHER   account required        pam_prohibit

#
# Password Management
#
dtlogin password  required      pam_aix
login   password  required      pam_aix
passwd  password  required      pam_aix
rlogin  password  required      pam_aix
su      password  required      pam_aix
telnet  password  required      pam_aix
xdm     password  required      pam_aix
OTHER   password  required      pam_prohibit


---------------------------------------------------------------
USER - GROUP
Users - Groups

During AIX installation default set of user accounts have been created, and the main purpose of these to prevent root from owning all filesystems and files. 
If these users and group IDs are not needed, you can remove them to minimize security risks associated with them. (Most typically uucp, nuucp, guest, lpd can be removed.)

root:     superuser (UID 0), system administrators log into it to perform system maintenance and problem determination.
bin:      owns important system dirs/files (so not only root owns all important files), and also owns the executable files for user commands
daemon:   responsible for executing server processes, owning these processes and the associated files
sys:      owns the default mounting point for the Distributed File Service (DFS) cache (I have not much info about DFS???)
adm:      ownership of diagnostic tools
guest:    useful to give access to the system for someone who has no account on the server
nobody:   it is used by the Network File System (NFS), and to enable remote printing
uucp:     (unix-to-unix copy) this user owns the files when transferring data between Unix servers over a dedicated line or telephone line
nuucp:    uucp and nuucp, are created when bos.net.uucp fileset is installed. Logging in as uucp is not allowed, with nuucp it is possible
lpd, lp:  used for starting the lpd daemon which is necessary to do remote printing.
invscout: used by Inventory Scout. This tool checks software and hardware configurations on the Hardware Management Console (HMC).
imnadm:   it is used by the AIX Documentation Search Service to conduct searches of online HTML documents

=========================================================================================================================================================================>


USER INFORMATION:
/etc/passwd                  contains the basic attributes of users. (username, if pw set, uid, gid, GECOS, home dir, shell)
                             (* means invalid or password is not set, ! means user has a password)   

/etc/security/passwd         it contains the password (encrypted) and other information. (here is the ADMCHG flag...)

                             root:
                                password = D2ylo7rm3Qw7g
                                lastupdate = 1244118051
                                flags =

                             pw: encrypted pw, if pw contains only an asterisk (*), account is locked until a password has been set
                             lastupdate: number of seconds since epoch (1970. jan. 1) when the password was last updated
                             flags: restrictions to changing the user's password. You can set three different flags:

                                * ADMIN.   If set, only the root user can change the user's password.
                                * ADMCHG.  If set, the user is prompted to change his or her password on the next login/su.
                                * NOCHECK. If set, any additional restrictions in /etc/security/user are ignored.


/etc/security/user           contains the most important settings, outside of the basics in /etc/passwd(umask, expires settings...)
                                       
                             uucp:
                                 admin = true
                                 login = false
                                 rlogin = false
                                 su = true
                                 ...   

/usr/lib/security/mkuser.sys    when new user is created (with mkuser) this script is executed
                             it will use the default parameters from file: /usr/lib/security/mkuser.default
                             creates home directory, sets permission, copies /etc/security/.profile as users profile
                       
/etc/security/.profile       this is the template .profile, which is copied when a new user created
                             (if you make changes in this file, the new users .profile will look like this file)




-----------------------------------

User profile is set up in the following way:

1. /etc/environment
PATH=/wherever:/right/there

2. /etc/profile which is shell script
PATH=$PATH:/somewhere/else
export PATH

3. users .profile
which is copied from /etc/security/profile at user creation

=========================================================================================================================================================================>

USER ULIMIT:

The /etc/security/limits file contains all the ulimits, or users' system resource limitations. 
The values are set with the mkuser command when the user is added to the system, or changed with the chuser command.  
A soft limit is a value that a user or application can change on the fly up to the maximum (the hard limit). 
The hard limit is just that -- the maximum value a parameter can be set to. (you can set the parameter to  -1, which translates to unlimited. )

(in smitty user or chuser, you can set the hard and softlimits, e.g. chuser fsize_hard=4000000 bb)

The /etc/security/limits file contains a section called default that defines a template of standard values for each user unless that user has set custom values. 
It can be changed with "vi" or with command "chuser" or for temporary for that user sesion with command "ulimit".

With the ulimit command, you can change your soft limits, up to the maximum set by the hard limits and ulimit command affects the current shell environment.

change user's ulimit parameters:
su - bb "-c ulimit -a"                            <--shows user ulimit settings
chuser core=2000000 bb                            <--change user core file size
chuser rss=-1 rss_hard=-1 data=-1 data_hard=-1 <user>        <--data and memory unlimited,  rss:memory (shared memory), data: data stack
su - bb "-c ulimit -a"                            <--check new settings (or you can see in /etc/security/limits)

Max user process:
lsattr -EHl sys0                                  <--shows many things, maxuproc also

Normally there are three things we change for oracle. the system maxuproc and oracle's fsize and data segment size:
chdev -l sys0 -a maxuproc=512                     <--reboot is needed only for decresing (F1 in smitty)
chuser fsize=-1 data=-1 oracle

WARNING: Data segment size limit (ulimit -d) is set low (134217728 bytes)  Splunk may not work.
         You may want to run "ulimit -d unlimited" before starting splunk.
WARNING: Resident memory size limit (ulimit -m) is set low (33554432 bytes)  Splunk may not work.
         You may want to run "ulimit -m unlimited" before starting splunk.
WARNING: File size limit (ulimit -f) is set low (1073741312 bytes)  Splunk may not work.
         You may want to run "ulimit -f unlimited" before starting splunk.
        Management port has been set disabled; cli support for this configuration is currently incomplete.


=========================================================================================================================================================================>

SUID, SGID, SVTX



SUID Permission Bit:
An additional permission bit that can cause serious security problems is the SUID (set user ID). 
The SUID on an executable file means that when the file is executed, the process runs with an effective UID of the owner of the file. 
The SUID is not supported on shell scripts, and it has no meaning on a directory

SGID Permission Bit:
Another additional permission bit is the SGID (set group ID). The SGID on an executable file means that when the file is executed, 
the process runs with an effective GID of the group owner of the file. 
The SGID on a directory means that any file or directory created within the directory will have the same group ownership as the directory, rather than of the primary group of the user. 
The SGID permission bits are propagated down through the directory structure, so any directory created within a directory with the SGID bit set also inherits that bit

The SVTX Permission Bit:
The last of the additional permission bits is the SVTX, also referred to as the sticky bit. 
The SVTX on a directory means that even if the directory has global write permission (such as /tmp), users cannot delete a file in the directory unless they own the file or the directory

If the third bit is a lowercase s, it indicates that the SUID bit is set and that the execute permission (x) is turned on. 
An uppercase S indicates that the file has the SUID turned on but not the execute permission

Using Octal Notation
In octal notation, you are probably familiar with setting permissions, using three numbers such as 777 to indicate rwxrwxrwx. 
There is actually another position that is 0 by default, so 777 is really 0777. If you want to set the SUID, SGID, or SVTX permission bit, 
this position takes on a value other than 0. SUID is assigned a 4; SGID is assigned a 2, and SVTX is assigned a 1. Use the appropriate value to turn on that permission

root@aix1: /home/bubba # chmod 7777 bb01
root@aixi1: /home/bubba # ls -l | grep bb01
-rwsrwsrwt   1 root     system            0 Jul 02 15:39 bb01

root@aix1: /home/bubba # chmod 7666 bb01
root@aix1: /home/bubba # ls -l | grep bb01
-rwSrwSrwT   1 root     system            0 Jul 02 15:39 bb01

-----------------------------------

umask

umask determines the permissions for new files and directories (for example if files are created with 644 or 640 permissions). 
/etc/security user file contains the umask value, which is by default: 022. It can be changed for the whole system, or for a specific user.

The umask logic is similar to the file/dir permissions, just with umas we need to subtract the umask value from a specific number to know with which permission a new file/dir will be created:



# umask
0022
# touch new.file; mkdir new.dir
drwxr-xr-x    2 root     system          256 Nov 02 18:11 new.dir
-rw-r--r--    1 root     system            0 Nov 02 18:11 new.file

# umask 027
# touch new027.file; mkdir new027.dir
drwxr-x---    2 root     system          256 Nov 02 18:13 new027.dir
-rw-r-----    1 root     system            0 Nov 02 18:13 new027.file


-----------------------------------

GROUPS:
adm                        takes care of most monitoring functions, such as performance, cron, and accounting
audit                      conducts system audits
system                     configures the system and standard hardware and also performs software maintenance
printq                     system manages queuing. Typical commands include enable, disable, qadm, and qpri
security                   handles password and user account issues.
staff                      the default group assigned to all new users


GROUP INFORMATION:

/etc/group                 Contains the basic attributes of groups.
/etc/security/group        Contains the extended attributes of groups.

=========================================================================================================================================================================>
Password update:

chuser unsuccessful_login_count=0 root
chuser minage=0 histexpire=0 histsize=0 root
echo "root:St@g^#231"|chpasswd
pwdadm -c root
chuser minage=1 histexpire=13 histsize=20 root

rmuser ashokp
mkuser ashok
echo "ashok:ashok123"|chpasswd
pwdadm -c ashok
visudo


chsec -f /etc/security/passwd -s gateway -a lastupdate=`perl -e 'print time'`
0 0 2 * * sh -x /scripts/passwordexpiry.sh

backupios -file /tmp/backup/VIOS1A.mksysb -mksysb
/usr/sbin/mkcd -m VIOS1A.mksysb -S -L -I /tmp/iso_images


=========================================================================================================================================================================>
=========================================================================================================================================================================>
User creation:-

mkgroup id=420 sbiitam
mkuser id=420 pgrp=sbiitam -a home=/home/sbiitam sbiitam
passwd sbiitam


mkgroup -'A' id='420' sbiitam
useradd -d /home/sbiitam -g sbiitam -G  sbiitam -u 420 -c "ITAM_User" -m sbiitam
lsuser sbiitam
chuser unsuccessful_login_count=0 sbiitam
echo "sbiitam:Sbi@1234" | chpasswd
chuser minage=0 sbiitam
pwdadm -c sbiitam
echo 'sbiitam  ALL=(ALL) NOPASSWD: ALL'  >> /etc/sudoers
cat /etc/group
oem_setup_env
cat /etc/passwd |grep -i sbiitam
cat /etc/group


cat /etc/passwd |grep -i 420
cat /etc/group |grep -i 420 

mkgroup id='420' 'sbiitam';mkuser id='420' pgrp='sbiitam' home='/home/sbiitam' shell='/usr/bin/ksh' gecos='ITAM_User' 'sbiitam'
echo "sbiitam:Sbi@1234" | chpasswd
pwdadm -c sbiitam
echo 'sbiitam  ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers;cat /etc/sudoers


/var/adm/wtmp	--> A file that contains login information.
/var/adm/sulog		--> A file that contains information about using the su command, which allows you to switch to another user, including the root account. 
/usr/lib/security/mkuser.default	--> Contains the default parameters that are assigned to newly created users when no other parameters are given during creation.
/usr/lib/security/mkuser.sys - A script called by the mkuser command.
/etc/passwd
/etc/group
/etc/shell
/etc/profile	--> 
/etc/environment	--> A file with predefined environment variables that is processed during each user’s login.
/etc/security/login.cfg 	--> Contains logon parameters, that is, the applicable shell, the maximum number of sessions, the time (seconds) available to enter the password at logon, and 
								the user authentication method on the system.
/etc/security/limits	--> Contains the system resources limit for users.
/etc/security/lastlog - A file that contains detailed information about recent successful and unsuccessful user attempts to log in to the system. 
/etc/security/user		--> Contains additional attributes for all users.
/etc/security/user.roles
/etc/security/passwd	--> Contains hashed user passwords.
/etc/security/group 	--> Contains additional user group attributes. 
/etc/security/audit/config		--> Specifies the auditing class to be assigned to the user.
